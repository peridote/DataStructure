#include<stdio.h>
#include <stdlib.h>
#include <string.h>
#define RED 1
#define BLACK 0

int main(void)
{
    FILE* fb;
    fopen_s(&fb,"user.txt","rt");
}

typedef struct RBTnode{
    struct RBTnode* left;
    struct RBTnode* right;
    struct RBTnode* parent;
    int color;
}

void RBinsert(RBTnode* root, RBTnode* z) {
    RBTnode* x = root;
    RBTnode* y = NULL;
    while(x!=NULL) {
        y=x;
        if(z->key < x->key) x=x->left;
        else x=x->right;
    }
    z->parent = y;
    if(y==NULL) root = z;
    else if(z->key<y->key) y->left = z;
    else y->right = z;
    z->left = NULL;
    z->right = NULL;
    z->color = RED;
    RBinsFix(root, z)
}

void RBinsFix(RBTnode* root, RBTnode* z) {
    RBTnode* y = NULL;
    while(z->parent->color==RED) {
        if(z->parent == z->parent->parent->left) {
            y= z->parent->parent->right;
            if(y->color==RED) {
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            }
            else if(z==z->parent->right) {
                z=z->parent;
                lRotate(z);
            }
            else {
                z->parent->color = BLACK;
                z->parent->parent->color = RED;
                rRotet(z->parent->parent);
            }
        }
        else {
            y=z->parent->parent->left;
            if(y->color==RED) {
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            }
            else if(z==z->parent->left){
                z = z->parent;
                rRotate(z);
            }
            else {
                z->parent->color = BLACK;
                z->parent->parent->color = RED;
                lRotate(z->parent->parent);
            }
            root->color = BLACK;
        }

    }
}

void rRotate(RBTnode* root, RBTnode* y) {
    RBTnode* x = y->left;
    y->left = x->right;
    if(x->right!=NULL) x->right->parent = y;
    x->parent = y->parent;
    if(y->parent==NULL) root = x;
    else if(y==y->parent->right) y->parent->right = x;
    else y->parent->left = x;
    x->right = y;
    y->parent = x;
}

void lRotate(RBTnode* root, RBTnode* x) {
    RBTnode* y = x->right;
    x->right = y->left;
    if(y->left!=NULL) y->left->parent = x;
    y->parent = x->parent;
    if(x->parent==NULL) root = y;
    else if(x==x->parent->left) x->parent->left = y;
    else x->parent->right = y;
    y->left = x;
    x->parent = y;
}
