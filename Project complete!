#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#define RED 0
#define BLACK 1
#define WHITE 2
#define GRAY  3
typedef struct RBTnode{
    struct RBTnode* left;
    struct RBTnode* right;
    struct RBTnode* parent;
    int color;
    char* key;
    struct utree* superU;
    struct wtree* superW;
} RBTnode;
typedef struct utree{
    char id[10];
    char suDate[31];
    char* name;
    int tweetNum;
}utree;
typedef struct wtree{
    char* word;
    struct Adj* idList;
}wtree;
typedef struct Adj {
  char id[10];
  struct Adj* next;
} Adj;
typedef struct {
  int color;
  int parent;
  char id[10];
  int n, d, f;
  Adj* first;
  struct Vertex* next;
} Vertex;


RBTnode* userRBT_init();
RBTnode* RBinsert(RBTnode* root, RBTnode* z);
RBTnode* RBinsFix(RBTnode* root, RBTnode* z);
RBTnode* rRotate(RBTnode* root, RBTnode* y);
RBTnode* lRotate(RBTnode* root, RBTnode* x);
RBTnode* RBdelFix(RBTnode* root, RBTnode* x);

RBTnode* userRBT_init() {
    RBTnode* a = (RBTnode*)malloc(sizeof(RBTnode));
    a->color = RED;
    a->left = NULL;
    a->right = NULL;
    a->parent = NULL;
    a->superW = NULL;
    a->superU = (utree*)malloc(sizeof(utree));
    a->superU->tweetNum = 0;
    return a;
}
RBTnode* wordRBT_init() {
    RBTnode* a = (RBTnode*)malloc(sizeof(RBTnode));
    a->color = RED;
    a->left = NULL;
    a->right = NULL;
    a->parent = NULL;
    a->superW = (wtree*)malloc(sizeof(wtree));
    a->superW->idList = (Adj*)malloc(sizeof(Adj));
    a->superW->idList->next=NULL;
    a->superU = NULL;
    return a;
}
RBTnode* RBinsert(RBTnode* root, RBTnode* z) {

    RBTnode* x = root;
    RBTnode* y = NULL;

    while(x!=NULL) {
        y=x;
        if(strcmp(z->key, x->key)<0) x=x->left;
        else if(strcmp(z->key, x->key)==0) {
                Adj* k = x->superW->idList;
                while(k->next!=NULL){
                    if(strcmp(k->id,z->superW->idList->id)==0) return root;
                    k=k->next;
                }
                Adj* a = (Adj*)malloc(sizeof(Adj));
                a->next=NULL;
                strcpy(a->id, z->superW->idList->id);
                k->next = a;
                return root;
        }
        else x=x->right;
    }
    z->parent = y;
    if(y==NULL) root=z;
    else if(strcmp(z->key,y->key)<0) y->left = z;
    else y->right = z;
    z->left = NULL;
    z->right = NULL;
    z->color = RED;
    root = RBinsFix(root, z);
    return root;
}

RBTnode* RBinsFix(RBTnode* root, RBTnode* z) {
    RBTnode* y = NULL;
    while(z->parent!=NULL&&z->parent->color==RED) {
        if(z->parent == z->parent->parent->left) {
            y= z->parent->parent->right;
            if(y!=NULL&&y->color==RED) {
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            }
            else if(z==z->parent->right) {
                z=z->parent;
                root = lRotate(root, z);
            }
            else {
                z->parent->color = BLACK;
                z->parent->parent->color = RED;
                root=rRotate(root, z->parent->parent);
            }
        }
        else {
            y=z->parent->parent->left;
            if(y!=NULL&&y->color==RED) {
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            }
            else if(z==z->parent->left){
                z = z->parent;
                root=rRotate(root, z);
            }
            else {
                z->parent->color = BLACK;
                z->parent->parent->color = RED;
                root=lRotate(root, z->parent->parent);
            }

        }

    }
    root->color = BLACK;
    return root;
}

RBTnode* rRotate(RBTnode* root, RBTnode* y) {
    RBTnode* x = y->left;
    y->left = x->right;
    if(x->right!=NULL) x->right->parent = y;
    x->parent =     y->parent;
    x->right = y;
    if(y->parent==NULL) root=x;
    else if(y==y->parent->right) y->parent->right = x;
    else y->parent->left = x;
    y->parent = x;
    return root;
}

RBTnode* lRotate(RBTnode* root, RBTnode* x) {
    RBTnode* y = x->right;
    x->right = y->left;
    if(y->left!=NULL) y->left->parent = x;
    y->parent = x->parent;
    y->left = x;
    if(x->parent==NULL) root=y;
    else if(x==x->parent->left) x->parent->left = y;
    else x->parent->right = y;
    x->parent = y;
    return root;
}
RBTnode* RBtransplant(RBTnode* root, RBTnode* u, RBTnode* v) {
    if(u->parent==NULL) root = v;
    else if(u==u->parent->left) u->parent->left=v;
    else u->parent->right=v;
    if(v!=NULL) v->parent=u->parent;
}
RBTnode* RBminimum(RBTnode* root) {
    RBTnode* x = root;
    RBTnode* y = NULL;
    while(x!=NULL) {
        y=x;
        x=x->left;
    }
    return y;
}
RBTnode* RBdelete(RBTnode* root, RBTnode* z) {
    RBTnode* y = z;
    RBTnode* x = NULL;
    int yOriginColor = y->color;
    if(z->left==NULL) {
        x=z->right;
        root = RBtransplant(root, z, z->right);
    }
    else if(z->right==NULL) {
        x=z->left;
        root = RBtransplant(root, z, z->left);
    }
    else {
        y = RBminimum(z->right);
        yOriginColor = y->color;
        x = y->right;
        if(y->parent==z)
            x->parent=y;
        else {
            root = RBtransplant(root,y,y->right);
            y->right = z->right;
            y->right->parent = y;
        }
        root = RBtransplant(root, z, y);
        y->left=z->left;
        y->left->parent=y;
        y->color=z->color;
    }
    if(yOriginColor==BLACK&&x!=NULL)
        root = RBdelFix(root, x);
    return root;
}
RBTnode* RBdelFix(RBTnode* root, RBTnode* x) {
    RBTnode* w;
    while(x!=root&&x->color==BLACK) {
        if(x==x->parent->left) {
            w=x->parent->right;
            if(w->color==RED){
                w->color=BLACK;
                x->parent->color = RED;
                root = lRotate(root, x->parent);
                w=x->parent->right;
            }
            if(w->left->color==BLACK&&w->right->color==BLACK){
                w->color=RED;
                x=x->parent;
            }
            else if(w->right->color==BLACK){
                w->left->color=BLACK;
                w->color=RED;
                root=rRotate(root, w);
                w=x->parent->right;
            }
            w->color=x->parent->color;
            x->parent->color=BLACK;
            w->right->color=BLACK;
            lRotate(root, x->parent);
            x=root;
        }
        else {
            w=x->parent->left;
            if(w->color==RED){
                w->color=BLACK;
                x->parent->color = RED;
                root = rRotate(root, x->parent);
                w=x->parent->left;
            }
            if(w->left->color==BLACK&&w->right->color==BLACK){
                w->color=RED;
                x=x->parent;
            }
            else if(w->left->color==BLACK){
                w->right->color=BLACK;
                w->color=RED;
                root=lRotate(root, w);
                w=x->parent->left;
            }
            w->color=x->parent->color;
            x->parent->color=BLACK;
            w->left->color=BLACK;
            rRotate(root, x->parent);
            x=root;
        }
    }
    x->color=BLACK;
}
void Vertex_init(Vertex* self) {
  self->color = WHITE;
  self->parent = -1;
  strcpy(self->id, "(none)");
  self->n = 0;
  self->first = NULL;
  self->next = NULL;
  self->d = 0;
  self->f = 0;
  Adj* a = (Adj *)malloc(sizeof(Adj));
  strcpy(a->id, "(none)");
  a->next = NULL;
  self->first = a;
}
typedef struct id_stack{
    char id[10];
    struct id_stack* last;
}id_stack;


id_stack* stack_init() {
    id_stack* stack = (id_stack*)malloc(sizeof(id_stack));
    if(stack==NULL) printf("Bang\n");
    strcpy(stack->id, "empty");
    stack->last = NULL;
    return stack;
}
void push(char id[10], id_stack* stack) {
    id_stack* temp = (id_stack*)malloc(sizeof(id_stack));
    if(temp==NULL) printf("Bang\n");
    strcpy(temp->id, stack->id);
    temp->last = stack->last;
    strcpy(stack->id, id);
    stack->last=temp;
    }
char* pop(id_stack* stack) {
    char* temp = (char*)malloc(sizeof(char));
    if(temp==NULL) printf("Bang\n");
    strcpy(temp, stack->id);
    strcpy(stack->id, stack->last->id);
    id_stack* a = stack->last;
    stack->last = stack->last->last;
    free(a);
    return temp;
}
int is_empty(id_stack* stack) {
    if(strcmp(stack->id, "empty")==0) return 1;
    else return 0;
}
void vertex_add(Vertex* first,char me[10], char friend[10]){
    Vertex* x = first;
    Adj* y = first->first;
    Adj* z = y;
    if(strcmp(x->id, "(none)")==0) {
        strcpy(x->id, me);
        strcpy(x->first->id, friend);
        first->n += 1;
        Adj* a = (Adj *)malloc(sizeof(Adj));
        strcpy(a->id, "(none)");
        a->next = NULL;
        y->next = a;
    }
    else if(strcmp(x->id, me)==0&&strcmp(y->id, "(none)")!=0) {
        first->n += 1;
        y=y->next;
        for(;strcmp(y->id,"(none)")!=0;) {
            y = y->next;
        }
        strcpy(y->id , friend);
        Adj* a = (Adj *)malloc(sizeof(Adj));
        strcpy(a->id, "(none)");
        a->next = NULL;
        y->next = a;
    }
    else {
        for(;x->next!=NULL&&strcmp(x->id, me)!=0;) {
            x = x->next;
        }
        if (strcmp(x->id, me)==0){
            vertex_add(x, me, friend);
        }
        else if(x->next==NULL) {
            Vertex* a = (Vertex*)malloc(sizeof(Vertex));
            Vertex_init(a);
            x->next = a;
            vertex_add(a, me, friend);
        }
    }
}
void dfs(Vertex* first, Vertex* list, id_stack* stack) {
    Vertex* x;
    x = first;
    if(x->color == WHITE) {
        x->color = GRAY;
        Adj* a;
        a = first->first;
        x = list;
        while(a->next!=NULL){
            x = list->next;
        while(x!=NULL&&strcmp(x->id, a->id)!=0) {
            x=x->next;
        }
        if(x!=NULL&&x->color==WHITE) dfs(x, list, stack);
        else a=a->next;
        }
        first->color = BLACK;
        push(first->id, stack);
    }
}
typedef struct strong{
    char* stack;
    int n;
} strong;
strong* strong_init(){
    strong* s = (strong*)malloc(sizeof(strong));
    s->n = 0;
    return s;
}
void showStat(Vertex* first) {
    Vertex* a;
    a=first;
    int i, friendn=0, maxFriend, minFriend;
    maxFriend = a->n;
    minFriend = a->n;
    for(i=1;a->next!=NULL;i++) {
        friendn += a->n;
        if(a->n>maxFriend) maxFriend = a->n;
        if(a->n<minFriend) minFriend = a->n;
        a = a->next;
    }
    printf("Average number of friends: %f\n", (double)friendn/i);
    printf("Minimum friends: %d\n", minFriend);
    printf("Maximum number of friends: %d\n", maxFriend);
    printf("\n");
}
void readData(int userNum, int wordNum, Vertex* first) {
    Vertex* a;
    a=first;
    int i, friendn=0;
    for(i=1;a->next!=NULL;i++) {
        friendn += a->n;
        a = a->next;
    }

    printf("Total users: %d\n", userNum);
    printf("Total friendship records: %d\n", friendn);
    printf("Total tweets: %d\n", wordNum);
}
void findFriend(Vertex* first, char id[10]) {
    printf("%s: ", id);
    Vertex* a;
    Adj* b;
    a=first;
    while(1){
        if(strcmp(a->id, id)==0) break;
        else a = a->next;
    }
    b = a->first;
    for(;strcmp(b->next,"(none)")!=0;) {
        printf("%s, ", b->id);
        b = b->next;
    }
    printf("%s\n", b->id);
}
int hasFriend(Vertex* first, char me[10], char friend[10]) {
    Vertex* a;
    a=first;
    while(a!=NULL&&strcmp(a->id, me)!=0) {
        a = a->next;
    }
    if(a==NULL) return 0;
    Adj* b;
    b=a->first;
    while(strcmp(b->id,"(none)")!=0&&strcmp(b->id, friend)!=0) {
        b=b->next;
    }
    if(strcmp(b->id,"(none)")==0) return 0;
    else return 1;
}
void strongComponent(Vertex* first, id_stack* stack) {
    dfs(first, first, stack);
    Vertex* a = first;
    a=a->next;
    while(a!=NULL) {
        if(a->color==WHITE) dfs(a, first, stack);
        a = a->next;
    }
    printf("Strongly connected components: ");
    char vertexId[10], vertexRoute[10];
    char* temp;
    temp = pop(stack);
    strcpy(vertexId, temp);
    //free(temp);
    while(!is_empty(stack)) {
    temp = pop(stack);
    strcpy(vertexRoute, temp);
    //free(temp);
    printf("[%s",vertexId);
        while(!is_empty(stack)){
            if(hasFriend(first, vertexRoute, vertexId)==1) {
                printf(", %s", vertexRoute);
                strcpy(vertexId, vertexRoute);
                temp = pop(stack);
                strcpy(vertexRoute, temp);
                //free(temp);
            }
            else {
                break;
            }
        }
        printf("] ");
        if(is_empty(stack)&&!hasFriend(first, vertexRoute, vertexId)) printf("[%s]",vertexRoute);
        strcpy(vertexId, vertexRoute);
    }
}
/*void strongComponentTop5(Vertex* first, id_stack* stack) {
    dfs(first, first, stack);
    Vertex* a = first;
    a=a->next;
    while(a!=NULL) {
        if(a->color==WHITE) dfs(a, first, stack);
        a = a->next;
    }
    printf("Strongly connected components: ");
    char vertexId[10], vertexRoute[10];
    char* temp, *p, *p1, *tempo;
    strong* t;
    strong* s1,*s2,*s3,*s4,*s5;
    s1=strong_init(); s2=strong_init();
    s3=strong_init(); s4=strong_init();
    s5=strong_init();
    temp = pop(stack);
    strcpy(vertexId, temp);free(temp);
    p = (char*)malloc(sizeof(char)*(strlen(vertexId)+1));
    while(!is_empty(stack)) {
    t=strong_init();
    temp = pop(stack);
    strcpy(vertexRoute, temp); free(temp);
    t->n+=1;
    strcpy(p,strcat("[",vertexId));
        while(!is_empty(stack)){
            if(hasFriend(first, vertexRoute, vertexId)==1) {
                t->n+=1;
                p1 =(char*)malloc(sizeof(char)*(strlen(p)+1));
                strcpy(p1, p);
                free(p);
                t->stack = (char*)malloc(sizeof(char)*(strlen(p1)+2+strlen(vertexRoute)));
                free(p1);
                strcpy(t->stack, strcat(strcat(p1,", "),vertexRoute));
                strcpy(vertexId, vertexRoute);
                temp = pop(stack);
                strcpy(vertexRoute, temp);free(temp);
            }
            else {
                break;
            }
        }
        if(t->n>s1->n) {s1->n=t->n; free(s1->stack); s1->stack = (char*)malloc(sizeof(char)*(strlen(t->stack)+2)); strcpy(s1->stack,strcat(t->stack,"] "));}
        else if(t->n>s2->n) {s2->n=t->n; free(s2->stack); s2->stack = (char*)malloc(sizeof(char)*(strlen(t->stack)+2)); strcpy(s2->stack,strcat(t->stack,"] "));}
        else if(t->n>s3->n) {s3->n=t->n; free(s3->stack); s3->stack = (char*)malloc(sizeof(char)*(strlen(t->stack)+2)); strcpy(s3->stack,strcat(t->stack,"] "));}
        else if(t->n>s4->n) {s4->n=t->n; free(s4->stack); s4->stack = (char*)malloc(sizeof(char)*(strlen(t->stack)+2)); strcpy(s4->stack,strcat(t->stack,"] "));}
        else if(t->n>s5->n) {s5->n=t->n; free(s5->stack); s5->stack = (char*)malloc(sizeof(char)*(strlen(t->stack)+2)); strcpy(s5->stack,strcat(t->stack,"] "));}
        else ;
    free(t->stack); free(t);
        if(is_empty(stack)&&!hasFriend(first, vertexRoute, vertexId)){
            {
            if(s1->n==0) {s1->n==1; s1->stack = (char*)malloc(sizeof(char)*(strlen(vertexRoute)+2)); strcpy(s1->stack, strcat(strcat("[",vertexRoute),"]"));}
            else if(s2->n==0) {s2->n==1; s2->stack=(char*)malloc(sizeof(char)*(strlen(vertexRoute)+2)); strcpy(s2->stack, strcat(strcat("[",vertexRoute),"]"));}
            else if(s3->n==0) {s3->n==1; s3->stack = (char*)malloc(sizeof(char)*(strlen(vertexRoute)+2)); strcpy(s3->stack, strcat(strcat("[",vertexRoute),"]"));}
            else if(s4->n==0) {s4->n==1; s4->stack = (char*)malloc(sizeof(char)*(strlen(vertexRoute)+2)); strcpy(s4->stack, strcat(strcat("[",vertexRoute),"]"));}
            else if(s5->n==0) {s5->n==1; s5->stack = (char*)malloc(sizeof(char)*(strlen(vertexRoute)+2)); strcpy(s5->stack, strcat(strcat("[",vertexRoute),"]"));}
            else ;
        }
    }
        strcpy(vertexId, vertexRoute);
    }
     printf("%s %s %s %s %s",s1->stack,s2->stack,s3->stack,s4->stack,s5->stack);
     {free(s1->stack); free(s1);}
     {free(s2->stack); free(s2);}
     {free(s3->stack); free(s3);}
     {free(s4->stack); free(s4);}
     {free(s5->stack); free(s5);}

}*/
RBTnode* find_id(RBTnode* uroot, char id[10]) {
    RBTnode* x= uroot;
    while(x!=NULL) {
        if(strcmp(x->superU->id,id)==0) break;
        else if(strcmp(x->superU->id,id)>0) x=x->left;
        else x=x->right;
    }
    return x;
}
RBTnode* find_word(RBTnode* wroot, char word[100]) {
    RBTnode* x= wroot;
    while(x!=NULL) {
        if(strcmp(x->superW->word,word)==0) break;
        else if(strcmp(x->superW->word,word)>0) x=x->left;
        else x=x->right;
    }
    return x;
}
void top5TweetedUsers(int users[5], char usersid[5][10], RBTnode* uroot) {
    RBTnode* x = uroot;
    if(x!=NULL) {
        for(int i = 0;i<5;i++) {
            if(x->superU->tweetNum>users[i]) {
                    users[i]=x->superU->tweetNum;
                    strcpy(usersid[i],x->superU->id);
            break;
                    }
            else ;
        }
        top5TweetedUsers(users, usersid, x->left);
        top5TweetedUsers(users, usersid, x->right);
    }
    else ;

}
void top5TweetedWords(int words[5], char tweetedWords[5][100], RBTnode* wroot) {
    RBTnode* x = wroot;
    int num = 1;
    if(x!=NULL) {
        Adj* a = x->superW->idList;
        while(a->next!=NULL) {
            num++; a=a->next;
        }
        for(int i=0;i<5;i++) {
            if(num>words[i]) {
                words[i]=num;
                strcpy(tweetedWords[i],x->superW->word);
            break;
            }
            else ;
        }
    top5TweetedWords(words, tweetedWords, x->left);
    top5TweetedWords(words, tweetedWords, x->right);
    }
    else ;

}
Adj* FindTweetedUsers(char word[100], RBTnode* wroot) {
    RBTnode* x = wroot;
    while(x!=NULL) {
        if(strcmp(x->superW->word, word)==0) break;
        else if(strcmp(x->superW->word, word)<0) x=x->right;
        else x=x->left;
    }
    if(x==NULL) return NULL;
    return x->superW->idList;
}
void Interface() {
    printf("\n");
    printf("0. Read data files\n");
    printf("1. display statistics\n");
    printf("2. Top 5 most tweeted words\n");
    printf("3. Top 5 most tweeted users\n");
    printf("4. Find users who tweeted a word\n");
    printf("5. Find all people who are friends of above users\n");
    printf("6. Delete all mentions of a word\n");
    printf("7. Delete all users who mentioned a word\n");
    printf("8. Find strongly connected components\n");
    //printf("9. Find shortest path from a given user\n");
    printf("99. Quit\n");
    printf("Select Menu: ");
}
int main(void)
{
    FILE* fb;
    int programOn = 1;
    fb = fopen("friend.txt","rt");
    if(fb == NULL) return 1;
    Vertex* first;
    first = (Vertex*)malloc(sizeof(Vertex));
    Vertex_init(first);
    id_stack* stack = stack_init();
    while(1) {
        char me[10], friend[10];
        if(fgetc(fb)==EOF) break;
        fseek(fb, -1, SEEK_CUR);
        fscanf(fb, "%s", me);
        fscanf(fb, "%s\n", friend);
        vertex_add(first, me, friend);
    }
    fclose(fb);
    fb = fopen("user.txt","rt");
    if(fb==NULL) return 1;
    RBTnode *uRoot;
    char charBuff[100];
    int userNum = 0;
    uRoot = NULL;
    while(1) {
    if(fgetc(fb)==EOF) break;
    fseek(fb, -1, SEEK_CUR);
    RBTnode* user;
    user = userRBT_init();
    user->color = RED;
    fscanf(fb, "%s\n", charBuff);
    strcpy(user->superU->id, charBuff);
    fgets(charBuff, 33, fb); charBuff[30]='\0';
    strcpy(user->superU->suDate, charBuff);
    fscanf(fb, "%s\n", charBuff);
    user->superU->name = (char*)malloc(sizeof(char)*strlen(charBuff));
    strcpy(user->superU->name, charBuff);
    user->key = (char*)malloc(sizeof(char)*strlen(user->superU->id));
    strcpy(user->key, user->superU->id);
    uRoot = RBinsert(uRoot, user);
    userNum++;
    }
    fclose(fb);
    fb = fopen("word.txt","rt");
    if(fb==NULL) return 1;
    RBTnode *wRoot, *ur;
    int tweetNum=0;
    wRoot = NULL;
    while(1) {
    if(fgetc(fb)==EOF) break;
    fseek(fb, -1, SEEK_CUR);
    RBTnode* word;
    word = wordRBT_init();
    word->color = RED;
    fscanf(fb, "%s\n", charBuff);
    strcpy(word->superW->idList->id, charBuff);
    fgets(charBuff, 33, fb); charBuff[30]='\0';
    fscanf(fb, "%s\n", charBuff);
    word->superW->word = (char*)malloc(sizeof(char)*strlen(charBuff));
    strcpy(word->superW->word, charBuff);
    word->key = (char*)malloc(sizeof(char)*strlen(word->superW->word));
    strcpy(word->key, word->superW->word);
    wRoot = RBinsert(wRoot, word);
    tweetNum++;
    ur = find_id(uRoot, word->superW->idList->id);
    ur->superU->tweetNum += 1;
    }
    fclose(fb);

    Adj* idList=NULL;
    while(programOn){
        int i;
        int users[5], words[5];
        char usersid[5][10], tweetedWords[5][100];
        char word[100];
        RBTnode* mentioned;
        for(i=0;i<5;i++) {users[i]=0; words[i]=0;}
        Interface();
        scanf("%d",&i);
        printf("\n");
        switch(i) {
        case 0: readData(userNum,tweetNum, first); break;
        case 1: showStat(first); break;
        case 2: top5TweetedWords(words, tweetedWords, wRoot); printf("Top 5 most tweeted words: %s %s %s %s %s\n", tweetedWords[0], tweetedWords[1], tweetedWords[2], tweetedWords[3], tweetedWords[4]); break;
        case 3: top5TweetedUsers(users, usersid, uRoot); printf("Top 5 most tweeted users: %s %s %s %s %s\n",usersid[0],usersid[1],usersid[2],usersid[3],usersid[4]); break;
        case 4: printf("What word?: "); scanf("%s", word); idList = FindTweetedUsers(word,wRoot);
         if(idList==NULL) printf("There's no word like that\n");
         else {
            printf("Users who tweeted '%s':", word);
            Adj* a = idList;
            while(a!=NULL) {
                printf(" %s",a->id);
                a=a->next;
            }
            printf("\n");
         }
            break;
        case 5:
            if(idList==NULL) printf("Error. Please do no.4 first\n");
            else {
            printf("Each users: friends\n");
            Adj* a = idList;
            while(a!=NULL) {
            findFriend(first, a->id);
            a = a->next;
        }
        }
            break;
        case 6:
            if(idList==NULL) printf("Word was not specified\n");
            else{
            mentioned = find_word(wRoot, word);
            RBdelete(wRoot, mentioned);
            printf("Delete Complete\n");
            }
        break;
        case 7:
            if(idList==NULL) printf("Users were not specified\n");
            else {
                Adj* a = idList;
            while(a!=NULL) {
                mentioned = find_id(uRoot, a->id);
                RBdelete(uRoot, mentioned);
                a=a->next;
            }
            printf("Delete Complete\n");
            }
        break;
        case 8: strongComponent(first, stack); break;
        //case 9: break;
        case 99: programOn = 0; break;
        default: printf("Wrong number selected!! Choose again"); break;
        }
    }
    fclose(fb);
    return 0;
}
