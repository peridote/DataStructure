typedef struct Adj {
  char id[10];
  struct Adj* next;
} Adj;

typedef struct {
  int color;
  int parent;
  char id[10];
  int n, d, f;
  Adj* first;
  struct Vertex* next;
} Vertex;
void Vertex_init(Vertex* self) {
  self->color = WHITE;
  self->parent = -1;
  strcpy(self->id, "(none)");
  self->n = 0;
  self->first = NULL;
  self->next = NULL;
  self->d = 0;
  self->f = 0;
  Adj* a = (Adj *)malloc(sizeof(Adj));
  strcpy(a->id, "(none)");
  a->next = NULL;
  self->first = a;
}
typedef struct id_stack{
    char id[10];
    struct id_stack* last;
}id_stack;


id_stack* stack_init() {
    id_stack* stack = (id_stack*)malloc(sizeof(id_stack));
    strcpy(stack->id, "empty");
    stack->last = NULL;
    return stack;
}
void push(char id[10], id_stack* stack) {
    id_stack* temp = (id_stack*)malloc(sizeof(id_stack));
    strcpy(temp->id, stack->id);
    temp->last = stack->last;
    strcpy(stack->id, id);
    stack->last=temp;
    }
char* pop(id_stack* stack) {
    char* temp = (char*)malloc(sizeof(char));
    strcpy(temp, stack->id);
    strcpy(stack->id, stack->last->id);
    stack->last = stack->last->last;
    return temp;
}
int is_empty(id_stack* stack) {
    if(strcmp(stack->id, "empty")==0) return 1;
    else return 0;
}
void vertex_add(Vertex* first,char me[10], char friend[10]){
    Vertex* x = first;
    Adj* y = first->first;
    Adj* z = y;
    if(strcmp(x->id, "(none)")==0) {
        strcpy(x->id, me);
        strcpy(x->first->id, friend);
        first->n += 1;
        Adj* a = (Adj *)malloc(sizeof(Adj));
        strcpy(a->id, "(none)");
        a->next = NULL;
        y->next = a;
    }
    else if(strcmp(x->id, me)==0&&strcmp(y->id, "(none)")!=0) {
        first->n += 1;
        y=y->next;
        for(;strcmp(y->id,"(none)")!=0;) {
            y = y->next;
        }
        strcpy(y->id , friend);
        Adj* a = (Adj *)malloc(sizeof(Adj));
        strcpy(a->id, "(none)");
        a->next = NULL;
        y->next = a;
    }
    else {
        for(;x->next!=NULL&&strcmp(x->id, me)!=0;) {
            x = x->next;
        }
        if (strcmp(x->id, me)==0){
            vertex_add(x, me, friend);
        }
        else if(x->next==NULL) {
            Vertex* a = (Vertex*)malloc(sizeof(Vertex));
            Vertex_init(a);
            x->next = a;
            vertex_add(a, me, friend);
        }
    }
}
void dfs(Vertex* first, Vertex* list, id_stack* stack) {
    Vertex* x;
    x = first;
    if(x->color == WHITE) {
        x->color = GRAY;
        Adj* a;
        a = first->first;
        x = list;
        while(a->next!=NULL){
            x = list->next;
        while(x!=NULL&&strcmp(x->id, a->id)!=0) {
            x=x->next;
        }
        if(x!=NULL&&x->color==WHITE) dfs(x, list, stack);
        else a=a->next;
        }
        first->color = BLACK;
        push(first->id, stack);
    }
}
int main(void)
{
    FILE* fb;
    fb = fopen("friend.txt","rt");
    if(fb == NULL) return 1;
    Vertex* first;
    first = (Vertex*)malloc(sizeof(Vertex));
    Vertex_init(first);
    id_stack* stack = stack_init();
    while(1) {
        char me[10], friend[10];
        if(fgetc(fb)==EOF) break;
        fseek(fb, -1, SEEK_CUR);
        fscanf(fb, "%s", me);
        fscanf(fb, "%s\n", friend);
        vertex_add(first, me, friend);
    }
    strongComponent(first, stack);
    return 0;
}
void showStat(Vertex* first) {
    Vertex* a;
    a=first;
    int i, friendn=0, maxFriend, minFriend;
    maxFriend = a->n;
    minFriend = a->n;
    for(i=1;a->next!=NULL;i++) {
        friendn += a->n;
        if(a->n>maxFriend) maxFriend = a->n;
        if(a->n<minFriend) minFriend = a->n;
        a = a->next;
    }
    printf("Average number of friends: %f\n", (double)friendn/i);
    printf("Minimum friends: %d\n", minFriend);
    printf("Maximum number of friends: %d\n", maxFriend);
    printf("\n");
}
void readData(Vertex* first) {
    Vertex* a;
    a=first;
    int i, friendn=0;
    for(i=1;a->next!=NULL;i++) {
        friendn += a->n;
        a = a->next;
    }

}
void findFriend(Vertex* first, char id[10]) {
    printf("%s: ", id);
    Vertex* a;
    Adj* b;
    a=first;
    while(1){
        if(strcmp(a->id, id)==0) break;
        else a = a->next;
    }
    b = a->first;
    for(;strcmp(b->next,"(none)")!=0;) {
        printf("%s, ", b->id);
        b = b->next;
    }
    printf("%s\n", b->id);
}
int hasFriend(Vertex* first, char me[10], char friend[10]) {
    Vertex* a;
    a=first;
    while(a!=NULL&&strcmp(a->id, me)!=0) {
        a = a->next;
    }
    if(a==NULL) return 0;
    Adj* b;
    b=a->first;
    while(strcmp(b->id,"(none)")!=0&&strcmp(b->id, friend)!=0) {
        b=b->next;
    }
    if(strcmp(b->id,"(none)")==0) return 0;
    else return 1;
}
void strongComponent(Vertex* first, id_stack* stack) {
    dfs(first, first, stack);
    Vertex* a = first;
    a=a->next;
    while(a!=NULL) {
        if(a->color==WHITE) dfs(a, first, stack);
        a = a->next;
    }
    printf("Strongly connected components: ");
    char vertexId[10], vertexRoute[10];
    char* temp;
    temp = pop(stack);
    strcpy(vertexId, temp);
    free(temp);
    while(!is_empty(stack)) {
    temp = pop(stack);
    strcpy(vertexRoute, temp);
    free(temp);
    printf("[%s",vertexId);
        while(!is_empty(stack)){
            if(hasFriend(first, vertexRoute, vertexId)==1) {
                printf(", %s", vertexRoute);
                strcpy(vertexId, vertexRoute);
                temp = pop(stack);
                strcpy(vertexRoute, temp);
                free(temp);
            }
            else {
                break;
            }
        }
        printf("] ");
        if(is_empty(stack)&&!hasFriend(first, vertexRoute, vertexId)) printf("[%s]",vertexRoute);
        strcpy(vertexId, vertexRoute);
    }
}
